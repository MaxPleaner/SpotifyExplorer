doctype html
html lang='en'
  head
    script{
      src="https://code.jquery.com/jquery-3.7.1.min.js"
      integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo="
      crossorigin="anonymous"
    }
    sass:
      body
        background-color: black
        color: white
        font-family: Monospace
      .clearfix
        clear: both
      a, a:visited
        color: lightgreen
      a:hover
        color: darkgreen
      #loading
        color: red
      .name
        font-size: 1.2em
        font-weight: bold
      .items
        list-style: none
      .item
        float: left
        border: 1px solid grey
        border-radius: 10px
        margin: 5px
        padding: 5px
        display: inline-block
      .variants
        display: inline-block
      .variant
        margin: 2px
      .progress
          width: 100%
          background-color: #ddd
      .progress-bar
          width: 0%
          height: 30px
          background-color: #4CAF50
          text-align: center
          line-height: 30px
          color: white

  body

    / #data style='display: none'
    /   = @data

    img src='/logo.png' style='max-width: 400px'

    br
    small style='margin-left: 10px'
      span a 
      a href='https://dissonant.info' dissonant.info
      span  production
    br
    br

    hr

    #filters
      h1 Filters
      
      #search-filter
        form action="#"
          input type='submit' value='Search'
          input type='text'
      br

      #randomize
        label for='randomize' Give me random playlists
        input#randomize-toggle name='randomize' type='checkbox'
        br
        button#randomize-reseed Reseed
        
      hr 

      h1#loading Loading tons of playlists, give it a sec ...
      .progress
        #progressBar.progress-bar role='progressbar' aria-valuenow='0' aria-valuemin='0' aria-valuemax='100' style='width:0%' 0%

      #random-content style='display: none'
        h1 Random Playlists
        ul.items.random
        .clearfix

      #content style='display: none'
        h1 Compilations
        ul.items.other
        .clearfix

        h1 Places
        ul.items.places
        .clearfix

        h1 Genres
        ul.items.genres
        .clearfix

      br
      br
      br

    coffee:

      categoryName = (item, variant) ->
        if ["Intro", "Sound", "Pulse", "Edge"].includes(variant)
          "genres"
        else if ["Current", "Emerging", "Underground", "Needle"].includes(variant)
          "places"
        else
          "other"

      baseName = (item) ->
        if ["The Needle", "The Needle - Current", "The Needle - Emerging", "The Needle - Underground"].includes(item.name)
          "The Needle"
        else
          item.name
            .replace("The Sound of ", "")
            .replace("The Pulse of ", "")
            .replace("The Edge of ", "")
            .replace("Intro to ", "")
            .replace("The Needle", "")
            .replace(" - Current", "")
            .replace(" - Emerging", "")
            .replace(" - Underground", "")
            .replace(" / ", "")

      variantName = (item) =>
        if item.name.startsWith("The Sound of")
          "Sound"
        else if item.name.startsWith("The Pulse of")
          "Pulse"
        else if item.name.startsWith("The Edge of")
          "Edge"
        else if item.name.startsWith("The Needle")
          if item.name.endsWith(" - Current")
            "Current"
          else if item.name.endsWith(" - Emerging")
            "Emerging"
          else if item.name.endsWith(" - Underground")
            "Underground"
          else
            "Needle"
        else if item.name.startsWith("Intro to")
          "Intro"
        else
          "Link"

      groupData = ->
        groups = {}
        data.forEach (item) =>
          variant = variantName(item)
          category = (groups[categoryName(item, variant)] ?= {})
          variants = (category[baseName(item)] ?= {})
          variants[variantName(item)] = item
          # if baseName(item).length == 0
          #   debugger

        window.data = groups

      sortVariants = (variants) ->
        # todo, maybe, at some point
        variants

      dataLoaded = ->
        groupData()
        $('#loading').remove()
        Object.entries(data).forEach ([category, categoryItems]) =>
          Object.entries(categoryItems).forEach ([baseName, variants]) =>
            $item = $("
              <li class='item' data-category=#{categoryName}>
                <span class='name'>#{baseName}</span>
                <div class='variants'></div>
              </li>
            ")

            sortVariants(Object.entries(variants)).forEach ([variantName, item], index) =>
              $item.find('.variants').append $("
                <a class='variant' href='#{item.uri}' target='_blank'>#{variantName}</a>
              ")

            $(".#{category}").append($item)

      setupFilters = ->
        $("#search-filter form").on 'submit', (e) ->
          e.preventDefault()

          $items = $('#content .item')
          search = $("#search-filter input[type='text'").val()
          if search.length > 0
            tokens = search.split(" ")
            $items.each (index, item) ->
              itemText = $(item).find(".name").text().toLowerCase()
              if tokens.every((token) -> itemText.indexOf(token.toLowerCase()) != -1)
                $(item).show()
              else
                $(item).hide()
          else
            $items.show()


      getData = (callback) ->
        # getDataUsingEmbedded(callback)
        getDataUsingAjax(callback)

      getDataUsingEmbedded = (callback) ->
        callback(JSON.parse($("#data").text()))

      getDataUsingAjax = (callback) ->
        totalBytes = 1312538 # Replace with the actual file size
        $.ajax
          url: '/data'
          type: 'GET'
          dataType: 'json',
          contentType: 'application/json',

          xhr: ->
            xhr = new window.XMLHttpRequest()
            progressFn = (evt) ->
              console.log(evt.loaded)
              percentComplete = Math.min(99, (evt.loaded / totalBytes) * 100)
              $('#progressBar').css('width', percentComplete + '%').attr('aria-valuenow', percentComplete)
              $('#progressBar').text(percentComplete.toFixed(2) + '%')
            xhr.addEventListener "progress", progressFn, false
            return xhr
          success: (data) ->
            callback(data)
          error: (xhr, status, error) ->
            # Handle errors here
            console.log(error)
            alert("Error loading data. Please email nameless.identity1@gmail.com if this keeps happening")

      reseedRandomContent = ->
        allEntries = $("#content li.item")
        indices = generateRandomNumbers(0, allEntries.length - 1, 10)
        randomEntries = indices.map((index) -> allEntries[index])
        $("#random-content ul.items").empty()
        $("#random-content ul.items").append($(randomEntries).clone().show())

      generateRandomNumbers = (min, max, count) ->
        randomNumbers = new Set()
        while randomNumbers.size < count
          randomNumber = Math.floor(Math.random() * (max - min + 1)) + min
          randomNumbers.add(randomNumber)
        Array.from(randomNumbers)

      addRandomizeListeners = ->
        $("#randomize-toggle").on 'change', (e) ->
          if $(this).is(':checked')
            reseedRandomContent()
            $("#random-content").show()
            $("#content").hide()
          else
            $("#random-content").hide()
            $("#content").show()

        $("#randomize-reseed").on 'click', (e) ->
          reseedRandomContent()

      $ ->
        getData (data) ->
          window.data = data
          $(".progress").remove()
          dataLoaded()
          $("#content").show()
          setupFilters()
          addRandomizeListeners()

